Настройка git

Имя пользователя:
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

Выбор редактора:
$ git config --global core.editor emacs

Утилита сравнения:
$ git config --global merge.tool vimdiff

Проверка настроек:
$ git config --list
$ git config user.name


Основы Git.

Создание репозитория:
$ git init

Клонирование репозитория:
$ git clone git://github.com/schacon/grit.git mygrit

Добавление файлов в отслеживаемые (staged) - как новых, так и измененных:
$ git add

Отслеживание статуса:
$ git status			-	список измененных файлов
$ git diff				-	дополнительно diff для измененных файлов
$ git diff --staged		-	diff для staged файлов

.gitignore
# комментарий — эта строка игнорируется
*.a # не обрабатывать файлы, имя которых заканчивается на .a
!lib.a # НО отслеживать файл lib.a, несмотря на то, что мы игнорируем все .a файлы с помощью предыдущего правила
/TODO # игнорировать только файл TODO находящийся в корневом каталоге, не относится к файлам вида subdir/
TODO
build/ # игнорировать все файлы в каталоге build/
doc/*.txt # игнорировать doc/notes.txt, но не doc/server/arch.txt

Фиксация изменений:
$ git commit -m "Commit message"		-	коммит только проиндексированных файлов
$ git commit -a -m "Commit message"		-	коммит всех отслеживаемых файлов (в т.ч. не проиндексированных)

Удаление файлов:
$ git rm file_name						-	удаляет уже когда-то закоммиченный файл из гита и с диска
$ git rm --cached file_name				-	удаляет файл из гита, но оставляет на диске
$ git rm -f file_name					-	удаляет добавленный, но не закоммиченный файл с диска

Перемещение файла:
$ git mv file_from file_to				-	по факту гит определяет это как переименование файла

История изменений:
$ git log 					-	показывает историю коммитов в обратном хронологическом порядке
$ git log -p -2				-	также показывает diff между коммитами, -2 ограничивает число коммитов до 2х
$ git log --stat			- 	краткая статистика по коммитам
$ git log --pretty=oneline	-	разный формат вывода (также возможны short, full, fuller)
$ git log --pretty=format:"%h - %an, %ar : %s"	-	задать кастомный формат вывода
Параметр 	Описание выводимых данных
`%H`	Хеш коммита
`%h`	Сокращенный хеш коммита
`%T`	Хеш дерева
`%t`	Сокращенный хеш дерева
`%P`	Хеши родительских коммитов
`%p`	Сокращенные хеши родительских коммитов
`%an`	Имя автора
`%ae`	Электронная почта автора
`%ad`	Дата автора (формат соответствует параметру --date= )
`%ar`	Дата автора, относительная (пр. "2 мес. назад")
`%cn`	Имя коммитера
`%ce`	Электронная почта коммитера
`%cd`	Дата коммитера
`%cr`	Дата коммитера, относительная
`%s`	Комментарий

$ git log --pretty=format:"%h %s" --graph	-	также выводит тестовый граф ветвлений и слияний

Ограничение вывода истории изменений:
$ git log --since=2.weeks		-	изменения за последние 2 недели
$ git log --until=2008-01-15	-	изменения, сделанные до этой даты
Также возможны опции: --author=name --no-merges --committer=name --grep=text (commit message содержит указанный текст)


Отмена изменений
Изменение последнего коммита:
$ git commit --amend	-	заменяет последний коммит на новый
Пример: $ git commit -m 'initial commit' $ git add forgotten_file $ git commit --amend

Отмена индексации файла:
git reset HEAD filename

Отмена изменений файла:
git checkout -- filename	-	перепишет файл на неизмененное значение

Работа с удаленными репозиториями.

Отображение удалённых репозиториев:
$ git clone git://github.com/schacon/ticgit.git
$ git remote -v		-	показывает url и сокращенное имя (origin git://github.com/schacon/ticgit.git)
$ git remote show origin	-	показывает информацию о репозитории

Добавление удалённых репозиториев:
$ git remote add pb git://github.com/paulboone/ticgit.git	-	добавляет репозиторий пользователя paulboone

$ git fetch [remote-name]
$ git pull 
$ git push [remote-name]:[branch-name]

Удаление и переименование удалённых репозиториев:
$ git remote rename pb paul		-	переименование
$ git remote rm paul			-	удаление


Работа с метками.
Легковесная ветка		-	просто указатель на коммит
Аннотированная ветка	-	имеют контрольную сумму, информацию об авторе и т.д.

Просмотр меток:
$ git tag
$ git tag -l 'v1.4.2.*'		-	по шаблону
$ git show v1.4-lw			-	информация о ветке

Создание меток:
$ git tag v1.4-lw						-	создание легковесной ветки
$ git tag -a v1.4 -m 'my version 1.4'	-	создание аннотированной метки
$ git tag -a v1.2 9fceb02				-	создание метки на основе определенного коммита из истории

Отправка меток на сервер:
$ git push origin v0.1		-	отправка одной определенной метки
$ git push origin --tags	-	отправка сразу всех меток	


Работа с ветками.
Ветка - это просто указатель на определенный коммит

$ git branch test_branch		-	создание бранча
$ git checkout test_branch		-	переключение на бранч
$ git checkout -b test_branch	-	создание и переключение на бранч одной командой
$ git merge test_branch			-	сливает в текущую ветку изменения из ветки test_branch
									(по факту сдвигает указатель текущей ветки на последний коммит ветки test_branch)
$ git branch -d test_branch		-	удаление ветки